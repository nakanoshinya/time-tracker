<script>
  import { createEventDispatcher } from 'svelte';
  export let open = false;            // 親と bind:open
  export let categories = [];
  export let editorInitial = null;    // 親から来る初期値（編集 or 新規）

  const dispatch = createEventDispatcher();
  const defaultCat = () => categories[0]?.id ?? 'c_other';

  // ISO ⇄ <input type="datetime-local"> 変換（ローカル）
  const toLocalInput = (iso) => {
    if (!iso) return '';
    const d = new Date(iso);
    const t = new Date(d.getTime() - d.getTimezoneOffset()*60000);
    return t.toISOString().slice(0,16); // YYYY-MM-DDTHH:mm
  };
  const fromLocalInput = (s) => {
    if (!s) return null;
    const d = new Date(s); // ローカル時刻として解釈
    const t = new Date(d.getTime() - d.getTimezoneOffset()*60000);
    return t.toISOString();
  };

  // フォームは常に「コピー」で持つ（親のオブジェクトは触らない）
  let form = {
    id: null,
    category_id: defaultCat(),
    startInput: toLocalInput(new Date().toISOString()),
    endInput: '',
    note: ''
  };

  // open が true になるたび初期化（再オープンでも確実にリセット）
  $: if (open) {
    if (editorInitial) {
      form = {
        id: editorInitial.id ?? null,
        category_id: editorInitial.category_id ?? defaultCat(),
        startInput: toLocalInput(editorInitial.start ?? new Date().toISOString()),
        endInput: editorInitial.end ? toLocalInput(editorInitial.end) : '',
        note: editorInitial.note ?? ''
      };
    } else {
      form = {
        id: null,
        category_id: defaultCat(),
        startInput: toLocalInput(new Date().toISOString()),
        endInput: '',
        note: ''
      };
    }
  }

  function onCancel(){
    open = false;               // bind:open で親も閉じる
    dispatch('cancel');
  }
  function onSubmit(e){
    e.preventDefault();
    const payload = {
      id: form.id ?? undefined,
      category_id: form.category_id,
      start: fromLocalInput(form.startInput),
      end: form.endInput ? fromLocalInput(form.endInput) : null,
      note: form.note ?? ''
    };
    dispatch('save', { value: payload });
    open = false;               // 保存後も確実に閉じる
  }
</script>

{#if open}
  <div class="modal" role="dialog" aria-modal="true">
    <form class="panel" on:submit={onSubmit}>
      <h3>{form.id ? '記録の編集' : '手動で記録を追加'}</h3>

      <label>カテゴリ
        <select bind:value={form.category_id}>
          {#each categories as c}<option value={c.id}>{c.name}</option>{/each}
        </select>
      </label>

      <div class="row">
        <label>開始
          <input type="datetime-local" bind:value={form.startInput} required />
        </label>
        <label>終了
          <input type="datetime-local" bind:value={form.endInput} />
        </label>
      </div>

      <label>メモ
        <input type="text" placeholder="任意" bind:value={form.note} />
      </label>

      <div class="actions">
        <button type="button" class="ghost" on:click={onCancel}>キャンセル</button>
        <button type="submit" class="primary">保存</button>
      </div>
    </form>
  </div>
{/if}

<style>
  .modal{
    position:fixed; inset:0; background:rgba(0,0,0,.35);
    display:flex; align-items:center; justify-content:center; z-index:50;
  }
  .panel{
    width:min(560px, 92vw); background:#fff; border-radius:16px;
    box-shadow:0 10px 30px rgba(0,0,0,.18);
    padding:16px; display:flex; flex-direction:column; gap:10px;
  }
  h3{ margin:0 0 6px 0; font-size:1.1rem }
  label{ display:flex; flex-direction:column; gap:6px; font-size:.95rem; color:#334155 }
  select, input{
    border:1px solid #e5e7eb; border-radius:10px; padding:8px 10px; font-size:.95rem;
  }
  .row{ display:grid; grid-template-columns:1fr 1fr; gap:10px }
  .actions{ display:flex; justify-content:flex-end; gap:10px; margin-top:6px }
  .ghost{ background:#fff; border:1px solid #e5e7eb; border-radius:10px; padding:8px 12px }
  .primary{ background:#0ea5e9; color:#fff; border:none; border-radius:10px; padding:8px 12px }
  @media (max-width: 640px){ .row{ grid-template-columns:1fr } }
</style>
