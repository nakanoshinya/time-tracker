<script>
  import StartStopCard from '$lib/components/StartStopCard.svelte';
  import { onMount } from 'svelte';
  import { logsStore } from '$lib/stores/logs';
  import DonutChart from '$lib/components/DonutChart.svelte';
  import Clock24h from '$lib/components/Clock24h.svelte';
  import LogTable from '$lib/components/LogTable.svelte';
  import LogEditor from '$lib/components/LogEditor.svelte';

  const { logs, init, manualInsert, manualUpdate } = logsStore;

  // カテゴリ
  const categories = [
    { id:'c_univ',     name:'大学' },
    { id:'c_intern',   name:'長期インターン' },
    { id:'c_toeic',    name:'TOEIC' },
    { id:'c_learning', name:'学習' },
    { id:'c_phone',    name:'スマホ' },
    { id:'c_fun',      name:'遊び' },
    { id:'c_meal',     name:'料理/食事' },
    { id:'c_prep',     name:'準備' },
    { id:'c_move',     name:'移動' },
    { id:'c_sleep',    name:'睡眠' },
    { id:'c_other',    name:'その他' },
  ];
  const categoryLabels = Object.fromEntries(categories.map(c => [c.id, c.name]));
  const categoryColors = {
    c_univ:'#0ea5e9', c_intern:'#06b6d4', c_toeic:'#a78bfa', c_learning:'#10b981',
    c_phone:'#f43f5e', c_fun:'#f59e0b', c_meal:'#ef4444', c_prep:'#22c55e',
    c_move:'#3b82f6', c_sleep:'#64748b', c_other:'#94a3b8'
  };

  const toLocalDayKey = (d=new Date()) => {
    const x=new Date(d); x.setMinutes(x.getMinutes()-x.getTimezoneOffset());
    return x.toISOString().slice(0,10);
  };
  let dayKey = toLocalDayKey();

  onMount(() => init());
  $: dayLogs = $logs.filter(l => l.day_key === dayKey);

  // エディタ（新規/編集）
  let editorOpen = false, editorInitial = null;

  function openEditor(){                 // 新規
    editorInitial = null;
    editorOpen = true;
  }
  function openEditorFor(item){          // 編集（深いコピーで参照切る）
    editorInitial = JSON.parse(JSON.stringify(item));
    editorOpen = true;
  }
  async function onEditorSave(e){
    const v = e.detail.value;
    if (v.id) await manualUpdate(v.id, v);
    else      await manualInsert(v);
    editorOpen = false;
  }
</script>

<main class="wrap">
  <header class="top">
    <h1>Time Tracker</h1>
    <div class="spacer" />
    <a href="/weekly" class="ghost">週間ビュー</a>
    <input type="date" bind:value={dayKey} />
  </header>

  <!-- ページ全体を1つのグリッドで管理（重なり防止） -->
  <div class="pagegrid">
    <!-- 上段 左：計測 -->
    <div class="section section-timer">
      <StartStopCard {categories} {categoryLabels} onOpenEditor={openEditor} />
    </div>

    <!-- 上段 右：ログ（行の「編集」ボタンでモーダル起動） -->
    <div class="section section-log">
      <LogTable
        logs={dayLogs}
        max={2}
        {categoryLabels}
        on:edit={(e) => openEditorFor(e.detail.item)}
      />
    </div>

    <!-- 下段 左：カテゴリ分布 -->
    <div class="section section-donut">
      <div class="card">
        <h3>カテゴリの分布</h3>
        <DonutChart {dayKey} size={260} thickness={52} {categoryColors} {categoryLabels} />
      </div>
    </div>

    <!-- 下段 右：24時間円グラフ -->
    <div class="section section-clock">
      <div class="card">
        <h3>24時間の円グラフ</h3>
        <Clock24h {dayKey} {categoryColors} {categoryLabels} />
      </div>
    </div>
  </div>

  <LogEditor
    bind:open={editorOpen}
    {categories}
    {editorInitial}
    on:save={onEditorSave}
  />
</main>

<style>
  :global(body){background:#f8fafc}
  :global(*){ box-sizing: border-box; }  /* はみ出し予防 */

  .wrap{padding:16px;min-height:100vh}
  .top{display:flex;align-items:center;gap:12px;margin-bottom:12px}
  .top h1{margin:0;font-size:1.6rem}
  .spacer{flex:1}
  .ghost{
    text-decoration:none; border:1px solid #e5e7eb; padding:6px 10px;
    border-radius:10px; color:#334155; background:#fff
  }

  /* === 単一グリッドで4面を配置（重なり防止の決定版） === */
  .pagegrid{
    display:grid;
    grid-template-columns: 1fr 1fr;  /* 左右1:1 */
    grid-template-rows: auto auto;   /* 上段/下段を明示 */
    grid-template-areas:
      "timer log"
      "donut clock";
    gap:16px;
    align-items:stretch;
    width:100%;
  }
  .section{ min-width:0; }            /* Gridのはみ出し抑制 */
  .section-timer{ grid-area: timer; }
  .section-log  { grid-area: log; }
  .section-donut{ grid-area: donut; }
  .section-clock{ grid-area: clock; }

  /* 上段2枚の高さを揃える（子コンポの .card を伸ばす） */
  .section-timer :global(.card),
  .section-log   :global(.card){
    height:100%;
    min-height:260px;                 /* 必要なら 220–300 に調整 */
    display:flex; flex-direction:column;
    overflow:hidden;                  /* 枠外に出ないように */
  }

  /* 下段グラフは十分な高さを確保 */
  .section-donut .card,
  .section-clock .card{
    height:100%;
    min-height:360px;
    display:flex; flex-direction:column;
    overflow:hidden;
  }

  .card{
    background:#fff;border-radius:16px;
    box-shadow:0 2px 10px rgba(0,0,0,.06);
    padding:12px;
  }
  h3{margin:0 0 8px 0;font-size:1rem}

  /* スマホでは縦積み */
  @media (max-width: 980px){
    .pagegrid{
      grid-template-columns: 1fr;
      grid-template-rows: auto auto auto auto;
      grid-template-areas:
        "timer"
        "log"
        "donut"
        "clock";
    }
  }
</style>
